<?php


namespace game_system\pmmp\Entity;


use game_system\interpreter\SpawnBeaconInterpreter;
use game_system\model\Coordinate;
use game_system\model\SpawnBeacon;
use game_system\service\GameScoresService;
use game_system\service\UsersService;
use pocketmine\level\Level;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\nbt\tag\DoubleTag;
use pocketmine\nbt\tag\FloatTag;
use pocketmine\nbt\tag\ListTag;
use pocketmine\Player;
use pocketmine\scheduler\TaskScheduler;

class SpawnBeaconEntity extends NPCBase
{
    public $skinName = "SpawnBeacon";
    public $geometryId = "geometry.SpawnBeacon";
    public $geometryName = "SpawnBeacon.geo.json";

    public $width = 1;
    public $height = 2;

    public $defaultHP = 1;

    private $interpreter;

    public function __construct(Level $level,
                                Player $owner,
                                UsersService $usersService,
                                GameScoresService $gameScoresService,
                                TaskScheduler $scheduler) {
        $nbt = new CompoundTag('', [
            'Pos' => new ListTag('Pos', [
                new DoubleTag('', $owner->getX()),
                new DoubleTag('', $owner->getY() + 0.5),
                new DoubleTag('', $owner->getZ())
            ]),
            'Motion' => new ListTag('Motion', [
                new DoubleTag('', 0),
                new DoubleTag('', 0),
                new DoubleTag('', 0)
            ]),
            'Rotation' => new ListTag('Rotation', [
                new FloatTag("", $owner->getYaw()),
                new FloatTag("", $owner->getPitch())
            ]),
        ]);
        parent::__construct($level, $nbt);

        $this->interpreter = new SpawnBeaconInterpreter(
            $owner,
            new Coordinate(
                $this->getX(),
                $this->getY(),
                $this->getZ()),
            $usersService,
            $gameScoresService,
            $scheduler);
    }

    /**
     * @return SpawnBeacon
     */
    public function getSpawnBeaconData(): SpawnBeacon {
        return $this->interpreter->getSpawnBeacon();
    }

    protected function onDeath(): void {
        $this->interpreter->stop();
        parent::onDeath(); // TODO: Change the autogenerated stub
    }
}